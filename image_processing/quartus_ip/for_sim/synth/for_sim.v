// for_sim.v

// Generated using ACDS version 18.0 219

`timescale 1 ps / 1 ps
module for_sim (
		input  wire [7:0]  fifo_0_fifo_input_datain,                //              fifo_0_fifo_input.datain
		input  wire        fifo_0_fifo_input_wrreq,                 //                               .wrreq
		input  wire        fifo_0_fifo_input_rdreq,                 //                               .rdreq
		input  wire        fifo_0_fifo_input_clk,                   //                               .clk
		input  wire        fifo_0_fifo_input_sclr,                  //                               .sclr
		output wire [7:0]  fifo_0_fifo_output_dataout,              //             fifo_0_fifo_output.dataout
		output wire [10:0] fifo_0_fifo_output_usedw,                //                               .usedw
		output wire        fifo_0_fifo_output_full,                 //                               .full
		output wire        fifo_0_fifo_output_empty,                //                               .empty
		output wire        fifo_0_fifo_output_almost_full,          //                               .almost_full
		output wire        fifo_0_fifo_output_almost_empty,         //                               .almost_empty
		input  wire [15:0] lpm_divide_0_lpm_divide_input_numer,     //  lpm_divide_0_lpm_divide_input.numer
		input  wire [7:0]  lpm_divide_0_lpm_divide_input_denom,     //                               .denom
		input  wire        lpm_divide_0_lpm_divide_input_clock,     //                               .clock
		input  wire        lpm_divide_0_lpm_divide_input_aclr,      //                               .aclr
		output wire [15:0] lpm_divide_0_lpm_divide_output_quotient, // lpm_divide_0_lpm_divide_output.quotient
		output wire [7:0]  lpm_divide_0_lpm_divide_output_remain,   //                               .remain
		input  wire [7:0]  lpm_mult_0_mult_input_dataa,             //          lpm_mult_0_mult_input.dataa
		input  wire [7:0]  lpm_mult_0_mult_input_datab,             //                               .datab
		input  wire        lpm_mult_0_mult_input_clock,             //                               .clock
		input  wire        lpm_mult_0_mult_input_aclr,              //                               .aclr
		output wire [15:0] lpm_mult_0_mult_output_result            //         lpm_mult_0_mult_output.result
	);

	data_store_fifo fifo_0 (
		.data         (fifo_0_fifo_input_datain),        //   input,   width = 8,  fifo_input.datain
		.wrreq        (fifo_0_fifo_input_wrreq),         //   input,   width = 1,            .wrreq
		.rdreq        (fifo_0_fifo_input_rdreq),         //   input,   width = 1,            .rdreq
		.clock        (fifo_0_fifo_input_clk),           //   input,   width = 1,            .clk
		.sclr         (fifo_0_fifo_input_sclr),          //   input,   width = 1,            .sclr
		.q            (fifo_0_fifo_output_dataout),      //  output,   width = 8, fifo_output.dataout
		.usedw        (fifo_0_fifo_output_usedw),        //  output,  width = 11,            .usedw
		.full         (fifo_0_fifo_output_full),         //  output,   width = 1,            .full
		.empty        (fifo_0_fifo_output_empty),        //  output,   width = 1,            .empty
		.almost_full  (fifo_0_fifo_output_almost_full),  //  output,   width = 1,            .almost_full
		.almost_empty (fifo_0_fifo_output_almost_empty)  //  output,   width = 1,            .almost_empty
	);

	div_ip lpm_divide_0 (
		.numer    (lpm_divide_0_lpm_divide_input_numer),     //   input,  width = 16,  lpm_divide_input.numer
		.denom    (lpm_divide_0_lpm_divide_input_denom),     //   input,   width = 8,                  .denom
		.clock    (lpm_divide_0_lpm_divide_input_clock),     //   input,   width = 1,                  .clock
		.aclr     (lpm_divide_0_lpm_divide_input_aclr),      //   input,   width = 1,                  .aclr
		.quotient (lpm_divide_0_lpm_divide_output_quotient), //  output,  width = 16, lpm_divide_output.quotient
		.remain   (lpm_divide_0_lpm_divide_output_remain)    //  output,   width = 8,                  .remain
	);

	mult_ip lpm_mult_0 (
		.dataa  (lpm_mult_0_mult_input_dataa),   //   input,   width = 8,  mult_input.dataa
		.datab  (lpm_mult_0_mult_input_datab),   //   input,   width = 8,            .datab
		.clock  (lpm_mult_0_mult_input_clock),   //   input,   width = 1,            .clock
		.aclr   (lpm_mult_0_mult_input_aclr),    //   input,   width = 1,            .aclr
		.result (lpm_mult_0_mult_output_result)  //  output,  width = 16, mult_output.result
	);

endmodule
